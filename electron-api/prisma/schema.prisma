// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Usuário
model User {
  id              String    @id @default(uuid())
  email           String    @unique
  password        String
  name            String
  role            UserRole  @default(CUSTOMER)
  addresses       Address[]
  orders          Order[]
  refreshToken    String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("users")
}

// Endereço de entrega
model Address {
  id            String    @id @default(uuid())
  street        String
  number        String
  complement    String?
  neighborhood  String
  city          String
  state         String
  zipCode       String
  isDefault     Boolean   @default(false)
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders        Order[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("addresses")
}

// Produto
model Product {
  id              String         @id @default(uuid())
  title           String
  description     String
  price           Decimal        @db.Decimal(10, 2)
  discountedPrice Decimal?       @db.Decimal(10, 2)
  stock           Int
  images          ProductImage[]
  category        String
  rating          Float          @default(0)
  featured        Boolean        @default(false)
  orderItems      OrderItem[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@map("products")
}

// Imagem do produto
model ProductImage {
  id        String   @id @default(uuid())
  url       String
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("product_images")
}

// Pedido
model Order {
  id              String        @id @default(uuid())
  userId          String
  user            User          @relation(fields: [userId], references: [id])
  addressId       String?
  address         Address?      @relation(fields: [addressId], references: [id])
  items           OrderItem[]
  status          OrderStatus   @default(PENDING)
  total           Decimal       @db.Decimal(10, 2)
  shippingCost    Decimal       @db.Decimal(10, 2) @default(0)
  paymentMethod   PaymentMethod
  paymentIntentId String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@map("orders")
}

// Item do pedido
model OrderItem {
  id          String   @id @default(uuid())
  orderId     String
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId   String
  product     Product  @relation(fields: [productId], references: [id])
  quantity    Int
  price       Decimal  @db.Decimal(10, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("order_items")
}

// Enums
enum UserRole {
  ADMIN
  CUSTOMER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPING
  DELIVERED
  CANCELED
}

enum PaymentMethod {
  CREDIT_CARD
  BOLETO
  PIX
} 